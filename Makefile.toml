[tasks.compile]
description = '''
Compiles all crates, tests, and examples in the workspace using the debug profile.

Usage: `cargo make --no-workspace compile`
'''
install_crate = "cargo-script"
script_runner = "@shell"
command = "cargo"
args = ["script", "--", "./build/workspace_crate_each.rs", "--", "../../build/crate_compile.rs"]

[tasks.compile-release]
description = '''
Compiles all crates, tests, and examples in the workspace using the debug profile.

Usage: `cargo make --no-workspace compile-release`
'''
install_crate = "cargo-script"
script_runner = "@shell"
command = "cargo"
args = ["script", "--", "./build/workspace_crate_each.rs", "--", "../../build/crate_compile.rs", "--release"]

[tasks.test]
description = '''
Runs tests in the workspace. This is analogous to `cargo test --all`

Usage: `cargo make --no-workspace test`
'''
script = ["cargo test --all"]

[tasks.test-release]
description = '''
Runs tests in the workspace. This is analogous to `cargo test --all --release`

Usage: `cargo make --no-workspace test-release`
'''
script = ["cargo test --all --release"]

[tasks.conformance]
description = '''
Ensures the repository conforms to coding best practices, and only depends on libraries with
permissive licenses
'''
script = [
'''
set -e

if rustc --version | grep -qF 'nightly'; then
    # Rust fmt
    cargo fmt --all -- --write-mode=diff

    # Clippy - best practices
    [ "${CLIPPY_ENABLED}" = "false" ] || cargo clippy --all
fi

# Security vulnerability
cargo audit

# License compatibility
if cargo license | grep -qi '\bGPL\b'; then
    echo GPL license detected in a dependent crate. \
         This is not compatible with a closed-source commercial application.
    exit 1
fi
'''
]

[tasks.maintain]
description = '''
Performs the following code maintenance tasks:

* Format code: `cargo fmt --all`
* Update dependencies: `cargo update`
* Check for outdated dependencies: `cargo outdated`
'''
dependencies = [
    "workspace-format",
    "workspace-dependencies-update",
    "workspace-outdated"
]

# === workspace-format === #

[tasks.workspace-format]
dependencies = [
    "workspace-format-pre",
    "workspace-format-do",
    "workspace-format-post"
]

[tasks.workspace-format-pre]
dependencies = ["ensure-repository-clean"]

[tasks.workspace-format-do]
script = [
'''
set +x
. ./build/log.sh
notice "Running \`cargo fmt --all\`"
cargo fmt --all
'''
]

[tasks.workspace-format-post]
script = [
'''
set +x
. ./build/log.sh

if [ -n "$(git status --porcelain)" ]; then
    git commit -am "Format repository with Rustfmt."
    notice "Formatted repository and committed changes."
fi
'''
]

# === workspace-dependencies-update === #

[tasks.workspace-dependencies-update]
dependencies = [
    "workspace-dependencies-update-pre",
    "workspace-dependencies-update-do",
    "workspace-dependencies-update-post"
]

[tasks.workspace-dependencies-update-pre]
dependencies = ["ensure-repository-clean"]

[tasks.workspace-dependencies-update-do]
script = [
'''
set +x
. ./build/log.sh
notice "Running \`cargo update\`"
cargo update
'''
]

[tasks.workspace-dependencies-update-post]
script = [
'''
set +x
. ./build/log.sh

if [ -n "$(git status --porcelain)" ]; then
    git commit -am "Upgraded workspace dependencies"
    notice "Upgraded workspace dependencies and committed changes."
    info "Remember to run \`cargo test\` before pushing."
fi
'''
]

# === workspace-outdated === #

[tasks.workspace-outdated]
dependencies = [
    "workspace-outdated-pre",
    "workspace-outdated-do",
    "workspace-outdated-post"
]

[tasks.workspace-outdated-pre]

[tasks.workspace-outdated-do]
description = "Runs verify-outdated cargo plugin."
condition = { env = { "CARGO_MAKE_CRATE_HAS_DEPENDENCIES" = "TRUE" } }
script = [
'''
set +x
. ./build/log.sh
notice "Running \`cargo outdated -w --root-deps-only --exit-code 1\`"
if ! cargo outdated -w --root-deps-only --exit-code 1; then
    warn "There are outdated dependencies. Please upgrade them as soon as possible."
fi
'''
]

[tasks.workspace-outdated-post]

# === common === #

[tasks.ensure-repository-clean]
script = [
'''
set +x
. ./build/log.sh
[ -z "$(git status --porcelain)" ] || error "Ensure the workspace is clean before running this task"
'''
]
