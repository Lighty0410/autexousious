# === Templates === #
# These are commonized definitions used across the stage definitions.
# Scroll down to the `CI Stages` section for the stage definitions.

.print_tool_versions_linux: &print_tool_versions_linux |
  # Print tool versions
  printf "Shell:\n"
  $0 --version
  printf "\n"

  printf "Cargo:\n"
  cargo --version -v
  printf "\n"

  printf "Rustc:\n"
  rustc --version -v
  printf "\n"

# === CI Stages === #

# Unfortunately we are not able to split `build` and `test` phases -- when we do, the `test` Gitlab
# CI runner is slightly different to the `build` runner, so the artifacts compiled in the `build`
# phase aren't used, and Rust attempts to recompile them in the test phase.
stages:
  - build_and_test
  - publish

variables:
  # If we do not override `CARGO_HOME`, we must ensure that ALL projects that use the Gitlab runners
  # do not request different versions of tooling, otherwise we run into concurrency issues.
  # Also, we are not able to set it at the this level since we have a Windows runner which does not
  # use the `$VAR` syntax, but `%VAR%`.
  #
  # Furthermore, there is an open bug in Gitlab that Windows is unable to use CI environment
  # variables in .gitlab-ci.yml:
  #
  # See <https://gitlab.com/gitlab-org/gitlab-ce/issues/43337>
  # ---
  # CARGO_HOME: $CI_PROJECT_DIR/cargo
  RUST_BACKTRACE: 1

nightly:conformance:
  stage: build_and_test # piggy backing so that it runs in parallel
  tags:
    - kcov
    - linux
    - rust
    - nightly
  variables:
    RUSTUP_TOOLCHAIN: nightly-2018-03-16-x86_64-unknown-linux-gnu
    # Uncomment the next line if clippy is not compatible with the latest nightly.
    # CLIPPY_ENABLED: 'false'
  before_script:
    - *print_tool_versions_linux
    - build/install_packages_linux.sh
    - build/install_cargo_make.sh

    # For the `cargo --list` commands, we need to pipe stderr to /dev/null because of these issues:
    #
    # * https://github.com/sfackler/cargo-tree/issues/25
    # * https://github.com/rust-lang/rust/issues/46016
    # Automated crate security audit
    - |
      # Install cargo-audit
      existing_crates="$(cargo --list 2>&1)"
      if ! echo "${existing_crates}" | grep -q '\baudit\b' ; then
        cargo install cargo-audit
      fi

    # Automated license checks
    - |
      # Install cargo-license
      existing_crates="$(cargo --list 2>&1)"
      if ! echo "${existing_crates}" | grep -q '\blicense\b'; then
        cargo install cargo-license
      fi

    # Nightly - Rustfmt and Clippy
    - |
      # Install rustfmt and clippy

      # Needed for gitlab-ci
      test -z "${USER}" && export USER=build
      build/install_rustfmt.sh
      build/install_clippy.sh
  script:
    # Code quality, security vulnerability checks, license compatibility
    - cargo make --no-workspace conformance

.linux_job_common: &linux_job_common
  stage: build_and_test
  tags:
    - kcov
    - linux
    - rust
    - stable
    - xvfb
  variables:
    CARGO_MAKE_RUN_CODECOV: 'true'
    RUSTUP_TOOLCHAIN: stable-x86_64-unknown-linux-gnu
  before_script:
    - *print_tool_versions_linux
    - build/install_packages_linux.sh
    - build/install_cargo_make.sh

linux:debug:
  <<: *linux_job_common
  script:
    - cargo test --all --no-run
    - source xvfb_start
    - cargo test --all
    - source xvfb_stop
  after_script:
    - source xvfb_start
    - cargo make --no-workspace workspace-coverage
    - source xvfb_stop
    - grep -F merged_files ./target/coverage/index.json | grep -o '"covered":"[0-9]\+\.[0-9]\+"'
  coverage: '/"covered":"\d+\.\d+"/'

linux:release:
  <<: *linux_job_common
  script:
    - cargo test --all --release --no-run
    - source xvfb_start
    - cargo test --all --release
    - source xvfb_stop
    - ./build/publish_prepare_app.sh
  artifacts:
    name: linux-x86_64
    when: on_success
    paths:
    - target/publish
    expire_in: 1 week

.windows_job_common: &windows_job_common
  stage: build_and_test
  tags:
    - windows
    - rust
    - stable
  variables:
    RUSTUP_TOOLCHAIN: stable-x86_64-pc-windows-msvc
  before_script:
    - cargo --version -v
    - rustc --version -v

windows:debug:
  <<: *windows_job_common
  script:
    - cargo test --all --no-run
    - cargo test --all

windows:release:
  <<: *windows_job_common
  script:
    - cargo test --all --release --no-run
    - cargo test --all --release
    - .\build\publish_prepare_app.bat
  artifacts:
    name: windows-x86_64
    when: on_success
    paths:
    - target/publish
    expire_in: 1 week

linux:publish:
  stage: publish
  tags:
    - linux
    - rust
    - stable
  dependencies: ["linux:release"]
  variables:
    ITCH_IO_USER: azriel91
    CHANNEL: linux-x86_64
  script:
    # Publish `will`
    - app=will
    - metadata="$(cargo metadata --format-version 1 --no-deps --manifest-path app/${app}/Cargo.toml)"
    - version="$(echo "${metadata}" | jq -s ".[0].packages[] | select(.name == \"${app}\") | .version")"
    - >
      butler push \
        "target/publish/app/${app}" \
        "${ITCH_IO_USER}/${app}:${CHANNEL}" \
        --userversion "${version}" \
        --if-changed
  artifacts:
    name: linux-x86_64
    when: on_success
    paths:
    - target/publish
    expire_in: 1 week
  only:
    - tags

windows:publish:
  stage: publish
  tags:
    - windows
    - rust
    - stable
  dependencies: ["windows:release"]
  variables:
    ITCH_IO_USER: azriel91
    CHANNEL: windows-x86_64
  script:
    # Publish `will`
    - .\build\publish_butler_push.bat
  artifacts:
    name: windows-x86_64
    when: on_success
    paths:
    - target/publish
    expire_in: 1 week
  only:
    - tags
