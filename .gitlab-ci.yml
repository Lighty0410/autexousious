# === Templates === #
# These are commonized definitions used across the stage definitions.
# Scroll down to the `CI Stages` section for the stage definitions.

.cache_build_and_test: &cache_build_and_test
  cache:
    # We don't cache target/ as well because old binaries interfere with coverage
    paths:
      # Build dependencies (dependent crates)
      - cargo/
      - kcov-$KCOV_VERSION

# https://hub.docker.com/r/rustlang/rust/tags/
.rust_image_nightly: &rust_image_nightly "rustlang/rust:nightly"

# https://hub.docker.com/r/library/rust/tags/
# https://github.com/rust-lang-nursery/docker-rust
.rust_image_stable: &rust_image_stable "rust:latest"

.install_dependencies: &install_dependencies
  before_script:
    - $0 --version
    - grep --version
    - cargo --version -v
    - rustc --version -v
    - apt-get update -qq
    - |
      pkgs=(
        # amethyst
        libasound2-dev

        # enigo
        libxtst-dev

        # kcov
        libcurl4-openssl-dev
        libelf-dev
        libdw-dev
        cmake
        gcc
        binutils-dev
        zlib1g-dev
        libiberty-dev
        zip

        # xvfb
        xvfb
        libgl1-mesa-dev
        libgl1-mesa-glx
        mesa-utils
      )
      apt-get install -y -qq "${pkgs[@]}"

    # For the `cargo --list` commands, we need to pipe stderr to /dev/null because of these issues:
    #
    # * https://github.com/sfackler/cargo-tree/issues/25
    # * https://github.com/rust-lang/rust/issues/46016
    - |
      # Install cargo-make
      is_cargo_make_installed() {
        return $(cargo --list 2>&1 | grep -q '\bmake\b'; echo $?)
      }
      is_cargo_make_minimum() {
        # Minimum version 0.10
        return $(cargo make --version | grep -q '\b[0-9]\+[.][0-9]\{2,\}'; echo $?)
      }

      if ! is_cargo_make_installed; then
        cargo install cargo-make
      elif ! is_cargo_make_minimum; then
        cargo install cargo-make --force
      fi

    # Automated crate security audit
    - cargo --list 2>&1 | grep -q '\baudit\b' || cargo install cargo-audit

    # Automated license checks
    - cargo --list 2>&1 | grep -q '\blicense\b' || cargo install cargo-license

    # Nightly - Rustfmt and Clippy
    #
    # TODO: Don't install clippy --force when it is automatically distributed
    # https://github.com/rust-lang-nursery/rust-clippy/issues/1358
    # https://github.com/nrc/dev-tools-team/issues/4
    - |
      # Install Rustfmt and Clippy if on nightly
      if rustc --version | grep -qF 'nightly'; then
        rustup component add rustfmt-preview
        cargo install clippy --force
      fi

.job_nightly: &job_nightly
  image: *rust_image_nightly
  variables:
    CARGO_MAKE_RUN_CODECOV: 'true'
    KCOV_VERSION: 34

.job_stable: &job_stable
  image: *rust_image_stable
  variables:
    CARGO_MAKE_SKIP_CODECOV: 'true'

.xvfb_start: &xvfb_start |
  # Start XVFB
  export DISPLAY=:99.0
  /sbin/start-stop-daemon --start \
                          --quiet \
                          --pidfile /tmp/custom_xvfb_99.pid \
                          --make-pidfile \
                          --background \
                          --exec /usr/bin/Xvfb \
                          -- \
                          :99 \
                          -screen 0 1280x1024x24+32 \
                          -pixdepths 3 27 32 \
                          -ac \
                          +extension GLX \
                          +render \
                          -noreset

.stage_build_and_test: &stage_build_and_test
  stage: build_and_test
  <<: *install_dependencies
  <<: *cache_build_and_test
  script:
    # Code quality, security vulnerability checks, license compatibility
    - cargo make --no-workspace conformance

    # Compile all tests before running them
    - cargo test --all --no-run

    # Start XVFB and run tests
    - *xvfb_start
    - cargo test --all

# === CI Stages === #

# Unfortunately we are not able to split `build` and `test` phases -- when we do, the `test` Gitlab
# CI runner is slightly different to the `build` runner, so the artifacts compiled in the `build`
# phase aren't used, and Rust attempts to recompile them in the test phase.
stages:
  - build_and_test

variables:
  CARGO_HOME: $CI_PROJECT_DIR/cargo

nightly:build_and_test:
  <<: *stage_build_and_test
  <<: *job_nightly
  after_script:
    - *xvfb_start
    # On gitlab-ci we cannot use sudo to install kcov, which ships with the default Makefile from
    # cargo-make.
    #
    # We have tried overriding the kcov install_script in [tasks.coverage-kcov] in Makefile.toml,
    # but for some reason cargo-make does not use the override. cargo-make does have tests proving
    # that it does use overrides; maybe it's to do with workspace crates.
    #
    # Anyway, we install it ourselves here.
    - |
      # install kcov
      command -v kcov >/dev/null 2>&1 || {
        if [ "$(grep -Ei 'debian|buntu|mint' /etc/*release)" ]; then
          wget https://github.com/SimonKagstrom/kcov/archive/v$KCOV_VERSION.zip
          unzip -uo v$KCOV_VERSION.zip
          cd kcov-$KCOV_VERSION

          build_dir='./build'

          # Uncomment the next line if kcov is not building correctly
          # rm -rf "${build_dir}"

          if ! test -d "${build_dir}"; then mkdir "${build_dir}" ; fi
          cd "${build_dir}"
          cmake ..
          make
          make install
          cd ../..
          # Don't delete previously downloaded files
          # rm -rf kcov-$KCOV_VERSION
        fi
      }
    - cargo make --no-workspace workspace-coverage
    - grep -F merged_files ./target/coverage/index.json | grep -o '"covered":"[0-9]\+\.[0-9]\+"'
  coverage: '/"covered":"\d+\.\d+"/'

stable:build_and_test:
  <<: *stage_build_and_test
  <<: *job_stable
